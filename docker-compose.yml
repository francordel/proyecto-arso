#Establecemos la version del docker-compose

version: '3.8'

#Declaramos los servicios que se van a gestionar desde doker compose

services:

  # Servicio que levanta una bbdd de mongo

  mongo:

    # Tipo de imagen que obtiene de los contenedores por defecto de docker hub, descargamos la ultima disponible

    image: mongo

    # El contenedor debe reiniciarse siempre que se detenga o falle.

    restart: always

    #Variables de entorno que establecen admin y contraseña

    environment:

      MONGO_INITDB_ROOT_USERNAME: root

      MONGO_INITDB_ROOT_PASSWORD: password

    #Establecemos un volumen para que se persista en la maquina local para no perderlas
    volumes:
      - ./mongo-db:/data/db
    # Este servicio de Mongo Express permite acceder a una interfaz web para administrar MongoDB a través del puerto 8081 del host.

  mongo-express:

  # Tipo de imagen que obtiene de los contenedores por defecto de docker hub, descargamos la ultima disponible

    image: mongo-express:latest

    restart: always

    #Mapeamos el acceso a mongo-express en el puerto 8081 de nuestra máquina

    ports:

      - 8081:8081

    environment:

      ME_CONFIG_MONGODB_ADMINUSERNAME: root

      ME_CONFIG_MONGODB_ADMINPASSWORD: password

      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/



  # Servicio que levanta una api .NET

  dotnet-api:

    # Utiliza la imagen del SDK de .NET 6

    image: mcr.microsoft.com/dotnet/sdk:6.0

    # Directorio de trabajo a partir del cual se realizaran los comandos en el servicio

    working_dir: /src/opiniones-rest

    # Variable de entorno para conectarse a mongo

    environment:

      - MONGODB_URI=mongodb://root:password@mongodb:27017

    # Sincronizacion de los cambios locales en docker

    volumes:

      - ./opiniones-rest:/src/opiniones-rest

    ports:

    # Mapear el puerto 5000 del contenedor al puerto 5000 del anfitrión

      - 5001:5000

    # cuando se inicie el contenedor, se ejecutará el comando dotnet watch run para compilar y

    # ejecutar la aplicación de .NET en el puerto 5000, y estará en modo de observación para

    # detectar y aplicar cambios en el código fuente. Esto es útil durante el desarrollo,

    # ya que permite que la aplicación se actualice automáticamente cuando se realizan cambios en

    # el código sin tener que reiniciar manualmente el contenedor.

    command: dotnet watch run --urls=http://*:5000